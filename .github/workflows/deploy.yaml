name: "Build and Publish"

on:
  push:
    tags: ['v*.*.*']

concurrency:
  group: "${{ github.repository }}-${{ github.workflow }}-${{ github.ref }}"

permissions:
  contents: write
  id-token: write
  pull-requests: write

env:
  IMAGE_NAME: 'sample_app'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.24.1

    - name: Lint
      run: go vet ./app/...

    - name: Test
      run: go test ./app/...

  build:
    needs: test
    if: ${{ github.ref_type == 'tag' }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: 'sa-east-1'

    - name: Login to Amazon ECR
      id: ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up docker buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ steps.ecr.outputs.registry }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{raw}}

    - name: Build and push docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        labels: ${{ steps.meta.outputs.labels }}
        tags: ${{ steps.meta.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          GIT_VERSION_TAG=${{ github.ref_name }}
          GH_ACCESS_TOKEN=${{ secrets.GH_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Deploy to AWS ECS Fargate
      env:
        IMAGE_TAG: ${{ steps.meta.outputs.version }}
        IMAGE_NAME: ${{ env.IMAGE_NAME }}
      run: |
        cd infra
        npm ci
        npx cdk bootstrap --require-approval never
        npx cdk deploy InfraStack --require-approval never --parameters repositoryName=${IMAGE_NAME} --parameters imageTag=${IMAGE_TAG}
